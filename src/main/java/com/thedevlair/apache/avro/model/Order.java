/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.thedevlair.apache.avro.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.thedevlair.apache.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"customerId\",\"type\":\"string\"},{\"name\":\"productId\",\"type\":\"string\"}]}");
    private static final long serialVersionUID = 2189562336239500436L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Order> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Order> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Order>
            WRITER$ = (org.apache.avro.io.DatumWriter<Order>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Order>
            READER$ = (org.apache.avro.io.DatumReader<Order>) MODEL$.createDatumReader(SCHEMA$);
    private java.lang.CharSequence id;
    private java.lang.CharSequence date;
    private java.lang.CharSequence customerId;
    private java.lang.CharSequence productId;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Order() {
    }
    /**
     * All-args constructor.
     * @param id The new value for id
     * @param date The new value for date
     * @param customerId The new value for customerId
     * @param productId The new value for productId
     */
    public Order(java.lang.CharSequence id, java.lang.CharSequence date, java.lang.CharSequence customerId, java.lang.CharSequence productId) {
        this.id = id;
        this.date = date;
        this.customerId = customerId;
        this.productId = productId;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Order> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Order> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a Order from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Order instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Order fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Order RecordBuilder.
     * @return A new Order RecordBuilder
     */
    public static com.thedevlair.apache.avro.model.Order.Builder newBuilder() {
        return new com.thedevlair.apache.avro.model.Order.Builder();
    }

    /**
     * Creates a new Order RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Order RecordBuilder
     */
    public static com.thedevlair.apache.avro.model.Order.Builder newBuilder(com.thedevlair.apache.avro.model.Order.Builder other) {
        if (other == null) {
            return new com.thedevlair.apache.avro.model.Order.Builder();
        } else {
            return new com.thedevlair.apache.avro.model.Order.Builder(other);
        }
    }

    /**
     * Creates a new Order RecordBuilder by copying an existing Order instance.
     * @param other The existing instance to copy.
     * @return A new Order RecordBuilder
     */
    public static com.thedevlair.apache.avro.model.Order.Builder newBuilder(com.thedevlair.apache.avro.model.Order other) {
        if (other == null) {
            return new com.thedevlair.apache.avro.model.Order.Builder();
        } else {
            return new com.thedevlair.apache.avro.model.Order.Builder(other);
        }
    }

    /**
     * Serializes this Order to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return date;
            case 2:
                return customerId;
            case 3:
                return productId;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.CharSequence) value$;
                break;
            case 1:
                date = (java.lang.CharSequence) value$;
                break;
            case 2:
                customerId = (java.lang.CharSequence) value$;
                break;
            case 3:
                productId = (java.lang.CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public java.lang.CharSequence getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(java.lang.CharSequence value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'date' field.
     * @return The value of the 'date' field.
     */
    public java.lang.CharSequence getDate() {
        return date;
    }

    /**
     * Sets the value of the 'date' field.
     * @param value the value to set.
     */
    public void setDate(java.lang.CharSequence value) {
        this.date = value;
    }

    /**
     * Gets the value of the 'customerId' field.
     * @return The value of the 'customerId' field.
     */
    public java.lang.CharSequence getCustomerId() {
        return customerId;
    }

    /**
     * Sets the value of the 'customerId' field.
     * @param value the value to set.
     */
    public void setCustomerId(java.lang.CharSequence value) {
        this.customerId = value;
    }

    /**
     * Gets the value of the 'productId' field.
     * @return The value of the 'productId' field.
     */
    public java.lang.CharSequence getProductId() {
        return productId;
    }

    /**
     * Sets the value of the 'productId' field.
     * @param value the value to set.
     */
    public void setProductId(java.lang.CharSequence value) {
        this.productId = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.id);

        out.writeString(this.date);

        out.writeString(this.customerId);

        out.writeString(this.productId);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8) this.id : null);

            this.date = in.readString(this.date instanceof Utf8 ? (Utf8) this.date : null);

            this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8) this.customerId : null);

            this.productId = in.readString(this.productId instanceof Utf8 ? (Utf8) this.productId : null);

        } else {
            for (int i = 0; i < 4; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.id = in.readString(this.id instanceof Utf8 ? (Utf8) this.id : null);
                        break;

                    case 1:
                        this.date = in.readString(this.date instanceof Utf8 ? (Utf8) this.date : null);
                        break;

                    case 2:
                        this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8) this.customerId : null);
                        break;

                    case 3:
                        this.productId = in.readString(this.productId instanceof Utf8 ? (Utf8) this.productId : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for Order instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
            implements org.apache.avro.data.RecordBuilder<Order> {

        private java.lang.CharSequence id;
        private java.lang.CharSequence date;
        private java.lang.CharSequence customerId;
        private java.lang.CharSequence productId;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.thedevlair.apache.avro.model.Order.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.date)) {
                this.date = data().deepCopy(fields()[1].schema(), other.date);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.customerId)) {
                this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.productId)) {
                this.productId = data().deepCopy(fields()[3].schema(), other.productId);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing Order instance
         * @param other The existing instance to copy.
         */
        private Builder(com.thedevlair.apache.avro.model.Order other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.date)) {
                this.date = data().deepCopy(fields()[1].schema(), other.date);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.customerId)) {
                this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.productId)) {
                this.productId = data().deepCopy(fields()[3].schema(), other.productId);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public java.lang.CharSequence getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder setId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'date' field.
         * @return The value.
         */
        public java.lang.CharSequence getDate() {
            return date;
        }


        /**
         * Sets the value of the 'date' field.
         * @param value The value of 'date'.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder setDate(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.date = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'date' field has been set.
         * @return True if the 'date' field has been set, false otherwise.
         */
        public boolean hasDate() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'date' field.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder clearDate() {
            date = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'customerId' field.
         * @return The value.
         */
        public java.lang.CharSequence getCustomerId() {
            return customerId;
        }


        /**
         * Sets the value of the 'customerId' field.
         * @param value The value of 'customerId'.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder setCustomerId(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.customerId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'customerId' field has been set.
         * @return True if the 'customerId' field has been set, false otherwise.
         */
        public boolean hasCustomerId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'customerId' field.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder clearCustomerId() {
            customerId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'productId' field.
         * @return The value.
         */
        public java.lang.CharSequence getProductId() {
            return productId;
        }


        /**
         * Sets the value of the 'productId' field.
         * @param value The value of 'productId'.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder setProductId(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.productId = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'productId' field has been set.
         * @return True if the 'productId' field has been set, false otherwise.
         */
        public boolean hasProductId() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'productId' field.
         * @return This builder.
         */
        public com.thedevlair.apache.avro.model.Order.Builder clearProductId() {
            productId = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Order build() {
            try {
                Order record = new Order();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.date = fieldSetFlags()[1] ? this.date : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.productId = fieldSetFlags()[3] ? this.productId : (java.lang.CharSequence) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










